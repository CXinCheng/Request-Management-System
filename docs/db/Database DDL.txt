DROP SCHEMA IF EXISTS request_management CASCADE;
CREATE SCHEMA request_management;

DROP TYPE IF EXISTS request_management.user_role CASCADE;
CREATE TYPE request_management.user_role AS ENUM ('Student', 'Professor', 'Admin');
DROP TABLE IF EXISTS request_management.users CASCADE;
CREATE TABLE request_management.users (
    name VARCHAR(255) NOT NULL,                             -- Name column of type varchar
    matrix_id VARCHAR(255) PRIMARY KEY,                 -- Matrix_Id column of type varchar
    email VARCHAR(255) NOT NULL UNIQUE,                     -- Email column of type varchar, with a unique constraint
    role request_management.user_role NOT NULL,                                -- Enum for role with specific values
    password VARCHAR(255) NOT NULL                          -- Password field (store hashed and salted password)
);

DROP TABLE IF EXISTS request_management.modules CASCADE;
CREATE TABLE request_management.modules (
    code VARCHAR(100) PRIMARY KEY,                             -- Code field of type varchar
    name VARCHAR(255) NOT NULL,                              -- Name field of type varchar
    exam_date TIMESTAMP,
    educator_id VARCHAR(255),
    class_last_updated_at TIMESTAMP,

    FOREIGN KEY (educator_id) REFERENCES request_management.users(matrix_id)
);

DROP TYPE IF EXISTS request_management.class_type CASCADE;
CREATE TYPE request_management.class_type AS ENUM ('Lecture', 'Tutorial', 'Laboratory', 'Sectional Teaching');
DROP TYPE IF EXISTS request_management.day_of_week CASCADE;
CREATE TYPE request_management.day_of_week AS ENUM ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');
DROP TABLE IF EXISTS request_management.classes CASCADE;
CREATE TABLE request_management.classes (
    module_code VARCHAR(255),                                             -- Foreign key to Module table
    class_type request_management.class_type,                                     -- Enum for class type (Lecture/Tutorial)
    day_of_week request_management.day_of_week,                                           -- Integer representing day of the week
    starting_time TIME NOT NULL,                                   -- Start time of the class
    ending_time TIME NOT NULL,                                     -- End time of the class
    class_no VARCHAR(10),                                              -- Class number
    
    PRIMARY KEY (module_code, class_type, class_no, day_of_week),
    UNIQUE(module_code, class_no),
    FOREIGN KEY (module_code) REFERENCES request_management.modules(code)
);

DROP TABLE IF EXISTS request_management.user_module_mapping CASCADE;
CREATE TABLE request_management.user_module_mapping (
    user_matrix_id VARCHAR(255),                                               -- Foreign key to Users table
    module_code VARCHAR(255),                                             -- Module identifier
    class_no VARCHAR(10),

    PRIMARY KEY (user_matrix_id, module_code, class_no),                                   -- Composite primary key
    FOREIGN KEY (user_matrix_id) REFERENCES request_management.users(matrix_id),      -- Foreign key constraint
    FOREIGN KEY (module_code, class_no) REFERENCES request_management.classes(module_code, class_no)   -- Foreign key constraint
);

DROP TABLE IF EXISTS request_management.requests CASCADE;
CREATE TABLE request_management.requests (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,    -- Self-increment primary key
    created_at TIMESTAMP NOT NULL,                          -- Timestamp for when the request was created
    start_date_of_leave TIMESTAMP NOT NULL,                 -- Timestamp for start of leave request
    date_of_request TIMESTAMP NOT NULL,                      -- Date of the request
    end_date_of_leave TIMESTAMP NOT NULL,                        -- Timestamp for end of leave request
    reason_of_leave VARCHAR(255) NOT NULL,                   -- Request details
    user_id VARCHAR(255) NOT NULL,
    blob_url text NOT NULL,

    FOREIGN KEY (user_id) REFERENCES request_management.users(matrix_id)
);

DROP TYPE IF EXISTS request_management.request_status CASCADE;
CREATE TYPE request_management.request_status AS ENUM ('Pending', 'Rejected', 'Approved');
DROP TABLE IF EXISTS request_management.sub_request CASCADE;
CREATE TABLE request_management.sub_request (
    details VARCHAR(255) NOT NULL,                          -- Request details
    status request_management.request_status NOT NULL,                         -- Enum status
    modified_at TIMESTAMP NOT NULL,                         -- Timestamp of modification
    module_code VARCHAR(255),                                 -- Foreign key to Module table
    approver_id VARCHAR(255) NOT NULL,                               -- Foreign key to Users table
    main_request_id INT,                                    -- Foreign key to Request table
    
    PRIMARY KEY (module_code, main_request_id),
    FOREIGN KEY (module_code) REFERENCES request_management.modules(code),          -- Link to Module table
    FOREIGN KEY (approver_id) REFERENCES request_management.users(matrix_id),          -- Link to Users table (must be Professor or Admin)
    FOREIGN KEY (main_request_id) REFERENCES request_management.requests(id)    -- Link to Request table
);

DROP TABLE IF EXISTS request_management.otp_store CASCADE;
CREATE TABLE request_management.otp_store (
    user_email VARCHAR(255) NOT NULL,
    otp_code VARCHAR(6) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    is_used BOOLEAN DEFAULT FALSE,
    
    PRIMARY KEY (user_email, otp_code),
    FOREIGN KEY (user_email) REFERENCES request_management.users(email)
);

-- Insert Users Records
INSERT INTO request_management.users ("name",matrix_id,email,"role","password") VALUES

    -- Password: test12345
    ('John Doe','A1234567B','test@app.com','Student'::request_management."user_role",'$2b$10$NDhafxuZ7JnqK2B5GnB4KOioZNBs2jY1VYkMNAbA.m1Xj5OBBI.GK'),

    -- Password: admin123
    ('Admin User','A1111111A','admin@app.com','Admin'::request_management."user_role",'$2b$10$orwXUtt/zILNBE3BSPWp6OKdDLFZqZZwWK8B5vhqr8ldGmP1usR56');
    
    -- Password: jane1234
    ('Jane Chin','P0123456A','janechin@app.com','Professor'::request_management."user_role",'$2b$10$NDLxhLUpAL9kxp/1Ckq1aumq8zOR5ktdT2ye6IK4/UtqWq2u32Ftu');