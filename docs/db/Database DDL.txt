DROP SCHEMA IF EXISTS request_management CASCADE;
CREATE SCHEMA request_management;

DROP TABLE IF EXISTS request_management.system_settings;
CREATE TABLE request_management.system_settings (
    key VARCHAR(255) PRIMARY KEY,
    value VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS request_management.faculties;
CREATE TABLE request_management.faculties (
    name VARCHAR(255) PRIMARY KEY
);

DROP TYPE IF EXISTS request_management.user_role CASCADE;
CREATE TYPE request_management.user_role AS ENUM ('Student', 'Professor', 'Admin');
DROP TABLE IF EXISTS request_management.users CASCADE;
CREATE TABLE request_management.users (
    name VARCHAR(255) NOT NULL,                                 -- Name column of type varchar
    matrix_id VARCHAR(255) PRIMARY KEY,                         -- Matrix_Id column of type varchar
    email VARCHAR(255) NOT NULL UNIQUE,                         -- Email column of type varchar, with a unique constraint
    role request_management.user_role NOT NULL,                 -- Enum for role with specific values
    password VARCHAR(255) NOT NULL                              -- Password field (store hashed and salted password)
    faculty VARCHAR(255)                                        -- School/Faculty
    contact_number VARCHAR(255)                                 -- Contact number
);

DROP TABLE IF EXISTS request_management.modules CASCADE;
CREATE TABLE request_management.modules (
    code VARCHAR(100) PRIMARY KEY,                              -- Code field of type varchar
    name VARCHAR(255) NOT NULL,                                 -- Name field of type varchar
    exam_date TIMESTAMP,                                        -- The exam date of the module
    educator_id VARCHAR(255),                                   -- The user id of the teaching educator
    class_last_updated_at TIMESTAMP,                            -- The timestamp when the classes data of this module is updated

    FOREIGN KEY (educator_id) REFERENCES request_management.users(matrix_id) ON DELETE SET NULL ON UPDATE CASCADE
);

DROP TYPE IF EXISTS request_management.class_type CASCADE;
CREATE TYPE request_management.class_type AS ENUM ('Lecture', 'Tutorial', 'Laboratory', 'No Class');
DROP TYPE IF EXISTS request_management.day_of_week CASCADE;
CREATE TYPE request_management.day_of_week AS ENUM ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');
DROP TABLE IF EXISTS request_management.classes CASCADE;
CREATE TABLE request_management.classes (
    module_code VARCHAR(255),                                       -- Foreign key to Module table
    class_type request_management.class_type,                       -- Enum for class type
    day_of_week request_management.day_of_week,                     -- Integer representing day of the week
    starting_time TIME NOT NULL,                                    -- Start time of the class
    ending_time TIME NOT NULL,                                      -- End time of the class
    weeks JSONB NOT NULL,                                           -- JSON object of weeks
    class_no VARCHAR(10),                                           -- Class number

    PRIMARY KEY (module_code, class_type, class_no, day_of_week),
    FOREIGN KEY (module_code) REFERENCES request_management.modules(code) ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TABLE IF EXISTS request_management.user_module_mapping CASCADE;
CREATE TABLE request_management.user_module_mapping (
    user_matrix_id VARCHAR(255),                                    -- Foreign key to Users table
    module_code VARCHAR(255),                                       -- Module identifier
    class_type request_management.class_type NOT NULL,              -- Enum for class type
    class_no VARCHAR(10) NOT NULL,                                  -- Class number

    PRIMARY KEY (user_matrix_id, module_code, class_type, class_no),
    FOREIGN KEY (user_matrix_id) REFERENCES request_management.users(matrix_id) ON DELETE CASCADE ON UPDATE CASCADE,
);

DROP TABLE IF EXISTS request_management.requests CASCADE; 
CREATE TABLE request_management.requests (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,    -- Self-increment primary key
    created_at TIMESTAMP NOT NULL,                          -- Timestamp for when the request was created
    start_date_of_leave TIMESTAMP NOT NULL,                 -- Timestamp for start of leave request\
    end_date_of_leave TIMESTAMP NOT NULL,                   -- Timestamp for end of leave request
    reason_of_leave VARCHAR(255) NOT NULL,                  -- Request details
    user_id VARCHAR(255) NOT NULL,                          -- User id of who submit the request
    blob_url text NOT NULL,                                 -- Url of the uploaded files

    FOREIGN KEY (user_id) REFERENCES request_management.users(matrix_id) ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TYPE IF EXISTS request_management.request_status CASCADE;
CREATE TYPE request_management.request_status AS ENUM ('Pending', 'Rejected', 'Approved');
DROP TABLE IF EXISTS request_management.sub_request CASCADE;
CREATE TABLE request_management.sub_request (
    details VARCHAR(255) NOT NULL,                          -- Request details
    status request_management.request_status NOT NULL,      -- Enum status
    modified_at TIMESTAMP NOT NULL,                         -- Timestamp of modification
    module_code VARCHAR(255),                               -- Foreign key to Module table
    approver_id VARCHAR(255) NOT NULL,                      -- Foreign key to Users table
    main_request_id INT,                                    -- Foreign key to Request table
    
    PRIMARY KEY (module_code, main_request_id),
    FOREIGN KEY (module_code) REFERENCES request_management.modules(code) ON DELETE CASCADE ON UPDATE CASCADE,          -- Link to Module table
    FOREIGN KEY (approver_id) REFERENCES request_management.users(matrix_id) ON DELETE CASCADE ON UPDATE CASCADE,       -- Link to Users table (must be Professor or Admin)
    FOREIGN KEY (main_request_id) REFERENCES request_management.requests(id) ON DELETE CASCADE ON UPDATE CASCADE        -- Link to Request table
);

DROP TABLE IF EXISTS request_management.otp_store CASCADE;
CREATE TABLE request_management.otp_store (
    user_email VARCHAR(255) NOT NULL,                       -- User email address
    otp_code VARCHAR(6) NOT NULL,                           -- OTP for verification
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,         -- Creation timestamp
    expires_at TIMESTAMP NOT NULL,                          -- Expiration timestamp
    is_used BOOLEAN DEFAULT FALSE,                          -- Flag to indicate if the OTP is used
    
    PRIMARY KEY (user_email, otp_code),
    FOREIGN KEY (user_email) REFERENCES request_management.users(email)
);

-- Insert Stsystem Settings
INSERT INTO request_management.system_settings ("key",value,updated_at) VALUES
	 ('academic_year','2024-2025','2025-03-04 14:44:32.879057'),
	 ('semester_number','2','2025-03-04 14:44:49.251633'),
	 ('faculty_last_updated','2025-01-04 14:45:51.767','2025-01-04 14:45:51.767');

-- Insert Users Records
INSERT INTO request_management.users ("name",matrix_id,email,"role","password") VALUES

    -- Password: test12345
    ('John Doe','A1234567B','test@app.com','Student'::request_management."user_role",'$2b$10$NDhafxuZ7JnqK2B5GnB4KOioZNBs2jY1VYkMNAbA.m1Xj5OBBI.GK'),

    -- Password: admin123
    ('Admin User','A1111111A','admin@app.com','Admin'::request_management."user_role",'$2b$10$orwXUtt/zILNBE3BSPWp6OKdDLFZqZZwWK8B5vhqr8ldGmP1usR56');
    
    -- Password: jane1234
    ('Jane Chin','P0123456A','janechin@app.com','Professor'::request_management."user_role",'$2b$10$NDLxhLUpAL9kxp/1Ckq1aumq8zOR5ktdT2ye6IK4/UtqWq2u32Ftu');

INSERT INTO request_management."users" (name, id_number, email, role, password) VALUES
    -- Students
    ('Alice Tan','S1000001A','alice.tan@app.com','Student'::request_management."user_role",'$2b$10$4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3A3j6GpNL/B37qIbC1O'),
    ('Bob Lim','S1000002B','bob.lim@app.com','Student'::request_management."user_role",'$2b$10$8BKhMkJmR3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaN'),
    ('Charlie Lee','S1000003C','charlie.lee@app.com','Student'::request_management."user_role",'$2b$10$C7pVXV5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP2K.MNOiBExPK'),
    ('Diana Koh','S1000004D','diana.koh@app.com','Student'::request_management."user_role",'$2b$10$Xq6T3Z9mOq4cL1NkF5Z7IOGZPahE.Xb2pMvLkoNRj9C6.BJmV1XeO'),
    ('Ethan Wong','S1000005E','ethan.wong@app.com','Student'::request_management."user_role",'$2b$10$gC5BqLOZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP2K.MNOiBExPKa'),
    ('Fiona Goh','S1000006F','fiona.goh@app.com','Student'::request_management."user_role",'$2b$10$N2Lpk6xZQJmP3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROX'),
    ('George Tan','S1000007G','george.tan@app.com','Student'::request_management."user_role",'$2b$10$V3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJm'),
    ('Hannah Ng','S1000008H','hannah.ng@app.com','Student'::request_management."user_role",'$2b$10$F5Z7IOGZPahE.Xb2pMvLkoNRj9C6.BJmV1XeOC7pVXV5OZfjwqhsn'),
    ('Isaac Teo','S1000009I','isaac.teo@app.com','Student'::request_management."user_role",'$2b$10$TzQMy1HAmkJ3JmP2K.MNOiBExPKaN2Lpk6xZQJmP3A3j6GpNL/B37'),
    ('Jasmine Koh','S1000010J','jasmine.koh@app.com','Student'::request_management."user_role",'$2b$10$Xb1kdgROXaNGnKhMKJmR3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3'),
    ('Kevin Chan','S1000011K','kevin.chan@app.com','Student'::request_management."user_role",'$2b$10$Rj9C6.BJmV1XeOC7pVXV5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3J'),
    ('Lydia Ong','S1000012L','lydia.ong@app.com','Student'::request_management."user_role",'$2b$10$N2Lpk6xZQJmP3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgRO'),
    ('Michael Chua','S1000013M','michael.chua@app.com','Student'::request_management."user_role",'$2b$10$7IOGZPahE.Xb2pMvLkoNRj9C6.BJmV1XeOC7pVXV5OZfjwqhsnV2H'),
    ('Nicole Lim','S1000014N','nicole.lim@app.com','Student'::request_management."user_role",'$2b$10$P3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJm'),
    ('Oliver Lee','S1000015O','oliver.lee@app.com','Student'::request_management."user_role",'$2b$10$HAmkJ3JmP2K.MNOiBExPKaN2Lpk6xZQJmP3A3j6GpNL/B37qIbC1O'),
    ('Patricia Wong','S1000016P','patricia.wong@app.com','Student'::request_management."user_role",'$2b$10$6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3A3j'),
    ('Quentin Tan','S1000017Q','quentin.tan@app.com','Student'::request_management."user_role",'$2b$10$9C6.BJmV1XeOC7pVXV5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP'),
    ('Rachel Goh','S1000018R','rachel.goh@app.com','Student'::request_management."user_role",'$2b$10$OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP2K.MNOiBExPKaN2Lpk6'),
    ('Samuel Chia','S1000019S','samuel.chia@app.com','Student'::request_management."user_role",'$2b$10$C1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3A3j6GpNL/B37qIb');
    ('Thomas Yeo','S1000020T','thomas.yeo@app.com','Student'::request_management."user_role",'$2b$10$X9pG1VOBfM7QZ2yJmK3L8GnPK1RoTzB6pN2LaMNOJXaC3BqO4G.Cb'),
    ('Umar Shah','S1000021U','umar.shah@app.com','Student'::request_management."user_role",'$2b$10$A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3'),
    ('Vanessa Chia','S1000022V','vanessa.chia@app.com','Student'::request_management."user_role",'$2b$10$V5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP2K.MNOiBExPKaN2Lp'),
    ('Wilson Goh','S1000023W','wilson.goh@app.com','Student'::request_management."user_role",'$2b$10$XaNGnKhMKJmR3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROX'),
    ('Xavier Lim','S1000024X','xavier.lim@app.com','Student'::request_management."user_role",'$2b$10$B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3A3j6GpNL/'),
    ('Yvonne Teo','S1000025Y','yvonne.teo@app.com','Student'::request_management."user_role",'$2b$10$HAmkJ3JmP2K.MNOiBExPKaN2Lpk6xZQJmP3A3j6GpNL/B37qIbC1O'),
    ('Zachary Ng','S1000026Z','zachary.ng@app.com','Student'::request_management."user_role",'$2b$10$N2Lpk6xZQJmP3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgRO'),
    ('Adam Khoo','S1000027A','adam.khoo@app.com','Student'::request_management."user_role",'$2b$10$7IOGZPahE.Xb2pMvLkoNRj9C6.BJmV1XeOC7pVXV5OZfjwqhsnV2H'),
    ('Bella Tan','S1000028B','bella.tan@app.com','Student'::request_management."user_role",'$2b$10$C1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3A3j6GpNL/B37qIb'),
    ('Chris Wong','S1000029C','chris.wong@app.com','Student'::request_management."user_role",'$2b$10$TzQMy1HAmkJ3JmP2K.MNOiBExPKaN2Lpk6xZQJmP3A3j6GpNL/B37');

-- Professors
INSERT INTO request_management."users" (name, id_number, email, role, password) VALUES
    ('Dr. Alvin Tan','P1000001A','alvin.tan@app.com','Professor'::request_management."user_role",'$2b$10$QJmP3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMK'),
    ('Dr. Brian Lim','P1000002B','brian.lim@app.com','Professor'::request_management."user_role",'$2b$10$B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3A3j6GpNL/'),
    ('Dr. Cynthia Ong','P1000003C','cynthia.ong@app.com','Professor'::request_management."user_role",'$2b$10$XaNGnKhMKJmR3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROX'),
    ('Dr. David Koh','P1000004D','david.koh@app.com','Professor'::request_management."user_role",'$2b$10$KhMKJmR3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGn'),
    ('Dr. Evelyn Lee','P1000005E','evelyn.lee@app.com','Professor'::request_management."user_role",'$2b$10$9C6.BJmV1XeOC7pVXV5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP'),
    ('Dr. Francis Goh','P1000006F','francis.goh@app.com','Professor'::request_management."user_role",'$2b$10$7pVXV5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP2K.MNOiBExPKa'),
    ('Dr. Grace Tan','P1000007G','grace.tan@app.com','Professor'::request_management."user_role",'$2b$10$MNOiBExPKaN2Lpk6xZQJmP3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9'),
    ('Dr. Henry Lim','P1000008H','henry.lim@app.com','Professor'::request_management."user_role",'$2b$10$ROXaNGnKhMKJmR3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgR');
    ('Dr. Daniel Ng','P1000009D','daniel.ng@app.com','Professor'::request_management."user_role",'$2b$10$JmP2K.MNOiBExPKaN2Lpk6xZQJmP3A3j6GpNL/B37qIbC1O4G.CbK'),
    ('Dr. Emily Koh','P1000010E','emily.koh@app.com','Professor'::request_management."user_role",'$2b$10$P3A3j6GpNL/B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJm'),
    ('Dr. Felix Tan','P1000011F','felix.tan@app.com','Professor'::request_management."user_role",'$2b$10$B37qIbC1O4G.CbKkqBGw9S3Xb1kdgROXaNGnKhMKJmR3A3j6GpNL/'),
    ('Dr. Grace Chua','P1000012G','grace.chua@app.com','Professor'::request_management."user_role",'$2b$10$9C6.BJmV1XeOC7pVXV5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP'),
    ('Dr. Henry Wong','P1000013H','henry.wong@app.com','Professor'::request_management."user_role",'$2b$10$7pVXV5OZfjwqhsnV2Hkxu9RAbTzQMy1HAmkJ3JmP2K.MNOiBExPKa');